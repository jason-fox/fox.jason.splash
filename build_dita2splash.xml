<?xml version="1.0" encoding="UTF-8"?>
<!--ant-->
<!--
  	This file is part of the DITA-OT Splash Screen Plug-in project.
  	See the accompanying LICENSE file for applicable licenses.
-->
<project
  xmlns:if="ant:if"
  xmlns:unless="ant:unless"
  xmlns:splash="antlib:fox.jason.splash"
  name="fox.jason.splash"
>
	<!--
		Set default values for the parameters passed into this plugin.
	-->
	<target depends="build-init" name="splash.init">
		<path id="splash.classpath">
			<fileset dir="${dita.plugin.fox.jason.splash.dir}/lib">
				<include name="*.jar"/>
			</fileset>
			<pathelement location="${dita.dir}/lib/ant-launcher.jar"/>
			<pathelement location="${dita.dir}/lib/ant.jar"/>
		</path>
		<mkdir dir="${dita.temp.dir}"/>
		<tempfile
      deleteonexit="true"
      destdir="${dita.temp.dir}"
      property="splash.info.file"
    />
	</target>
	<!--
		Make an HTTP request to the Cats API - check we are online and can obtain an image.
		For more information see: http://thecatapi.com/docs.html
	-->
	<target name="catsapi.init">
		<dita-ot-echo id="CATS001I" unless:set="otversion.legacy">
			<param name="1" value="Requesting image from the Cats API."/>
		</dita-ot-echo>

		<get
      dest="${splash.info.file}"
      ignoreerrors="true"
      retries="1"
      src="https://thecatapi.com/api/images/get?format=xml&amp;type=jpg,gif&amp;size=med"
    />
		<condition property="splash.exists" value="true">
			<and>
				<available file="${splash.info.file}"/>
				<length file="${splash.info.file}" length="0" when="gt"/>
			</and>
		</condition>
	</target>
	<!--
		Extracts the image URL and attribution from the Cat API response. The parsing has been done
		using simple string manipulation instead of loading the data as XML.

		Important: To protect yourself from Copyright issues, when you show an Image you MUST have it linked to; or clearly show the 'source_url' the value of the XML, or leave the link in-place with HTML format. This then links back to the image on thecatapi.com, where we then link to where we do the same to the last known Copyright holder.
	-->
	<target if="splash.exists" name="catsapi.parse">
		<loadfile
      failonerror="true"
      property="catsapi.info"
      srcfile="${splash.info.file}"
    />
		<splash:cats-parse/>
		<echo level="verbose" message="Cats image URL:  ${splash.image.url}"/>
	</target>
	<!--
			Make an HTTP request to the XKCD API - check we are online and can obtain an image.
			For more information see: https://xkcd.com/json.html
	-->
	<target name="xkcd.init">
		<dita-ot-echo id="XKCD001I">
			<param name="1" value="Requesting image from XKCD API."/>
		</dita-ot-echo>
		<get
      dest="${splash.info.file}"
      ignoreerrors="true"
      retries="1"
      src="https://xkcd.com/info.0.json"
    />
		<condition property="splash.exists" value="true">
			<and>
				<available file="${splash.info.file}"/>
				<length file="${splash.info.file}" length="0" when="gt"/>
			</and>
		</condition>
	</target>
	<!--
		Select a random image using the repsonse received previously and requests a
		random comic. Extracts the image URL and title

		XKCD comics are written by Randall Munroe, and his work is licensed under a 
		Creative Commons Attribution-NonCommercial 2.5 License.

		This means you're free to copy and share these comics (but not to sell them)
		
		Since some early versions of Rhino do not expose the NativeJSON class as public,
		simple string manipulation has been used to extract the necessary JSON elements.
	-->
	<target if="splash.exists" name="xkcd.parse">
		<loadfile
      failonerror="true"
      property="xkcd.latest"
      srcfile="${splash.info.file}"
    />
		<splash:xkcd-select/>
		<tempfile
      deleteonexit="true"
      destdir="${dita.temp.dir}"
      property="xkcd.json.file"
    />
		<get
      dest="${xkcd.json.file}"
      ignoreerrors="true"
      retries="1"
      src="https://xkcd.com/${num}/info.0.json"
    />
		<loadfile failonerror="true" property="xkcd.info" srcfile="${xkcd.json.file}"/>
		<splash:xkcd-parse/>
		<echo level="verbose" message="XKCD image URL: ${splash.image.url}"/>
	</target>
	<!--
		Invoke the splash screen with the given parameters.
	-->
	<target if="splash.exists" name="splash">
		<java
      classname="org.apache.tools.ant.launch.Launcher"
      classpathref="splash.classpath"
      fork="true"
      spawn="true"
    >
			<arg value="-buildfile"/>
			<arg value="${dita.plugin.fox.jason.splash.dir}/run-splash.xml"/>
			<arg value="-Dsplash.image=${splash.image.url}"/>
			<arg value="-Dsplash.title=${splash.title}"/>
			<arg value="-Dsplash.duration=20000"/>
		</java>
	</target>

	<!--
		Extracts the image URL from thisanimedoesnotexist.
	-->
	<target name="anime.seed">
		<splash:anime-select/>
		<property name="splash.title" value="This Anime does not exist"/>
		<property name="splash.exists" value="true"/>
		<property name="splash.image.url" value="https://thisanimedoesnotexist.ai/results/psi-${anime.psi}/seed3${anime.seed}.png"/>
		<echo level="verbose" message="Anime image URL: ${splash.image.url}"/>
	</target>

	<!--
		Fixed URL from Lorem Picsum
	-->
	<target name="picsum.seed">
		<property name="splash.exists" value="true"/>
		<property name="splash.title" value="Lorem Picsum Image"/>
		<property name="splash.image.url" value="https://picsum.photos/600/400"/>
		<echo level="verbose" message="https://picsum.photos/600/400"/>
	</target>

	<!--target name="person.parse">
		<property name="splash.exists" value="true"/>
		<property name="splash.title" value="This Person does not exist"/>
		<property name="splash.image.url" value="https://thispersondoesnotexist.com/image"/>
		<echo level="verbose" message="person image URL: ${splash.image.url}"/>
	</target>

	<target name="cats.parse">
		<property name="splash.exists" value="true"/>
		<property name="splash.title" value="This Cat does not exist"/>
		<property name="splash.image.url" value="https://thiscatdoesnotexist.com"/>
		<echo level="verbose" message="cat image URL: ${splash.image.url}"/>
	</target-->

	<!--
		Targets to be used when chaining the splash plugin from other plug-ins.
	-->
	<target depends="splash.init,xkcd.init,xkcd.parse,splash" name="xkcd.splash"/>
	<target depends="splash.init,catsapi.init,catsapi.parse,splash" name="catsapi.splash"/>
	<target depends="splash.init,anime.seed,splash" name="anime.splash"/>
	<target depends="splash.init,picsum.seed,splash" name="picsum.splash"/>


	<target name="random.splash">
		<splash:random-select/>
		<antcall target="${random.select}"/>
	</target>

	<!--
		Main targets executed if you directly call this plugin from Ant or Java
	-->
	<target depends="xkcd.splash" name="dita2xkcd"/>
	<target depends="catsapi.splash" name="dita2cats"/>
	<target depends="anime.splash" name="dita2anime"/>
	<target depends="picsum.splash" name="dita2picsum"/>
</project>
